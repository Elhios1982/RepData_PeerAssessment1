source('C:/coursera/RepData_PeerAssessment1/PA1_template.R')
install.packages("dplyr")
source('C:/coursera/RepData_PeerAssessment1/PA1_template.R')
df
sum(TRUE)
df.clean <- df %>%
mutate( steps = if( is.na(steps){1} ) )
df.clean <- df %>%
mutate( steps = is.na(steps) )
df.clean
a <- 1
if(a == 1) 1 else 2
a <- 5
if(a == 1) 1 else 2
df.clean <- df %>%
mutate( steps = if(is.na(steps)) 1 else steps )
df.clean
unique(df.clean$steps)
unique(df$steps)
df.clean
df.clean <- df %>%
mutate( steps = if(is.na(steps) == TRUE) 1 else steps )
df.clean
unique(df$steps)
unique(df$steps)
unique(df.clean$steps)
df.clean <- df %>%
mutate( steps = ifelse( is.na(steps), 1, steps) )
unique(df.clean$steps)
df.clean
unique(df.clean$steps)
?select
filter(df.mean.by.interval, interval == 0005)
filter(df.mean.by.interval, interval == "0005")
filter(df.mean.by.interval, interval == "0005") %>% select(Mean)
df.clean <- df %>%
mutate( steps = ifelse( is.na(steps), filter(df.mean.by.interval, interval == interval) %>% select(Mean), steps) )
df.clean <- df %>%
mutate( steps = ifelse( is.na(steps), filter(df.mean.by.interval, interval == "0005") %>% select(Mean), steps) )
## Test
get.mean.interval <- function(dataframe, value) {filter(x, interval == value) %>% select(Mean)}
df.clean <- df %>%
mutate( steps = ifelse( is.na(steps), get.mean.interval(df.mean.by.interval, interval), steps) )
select()
## Test
get.mean.interval <- function(dataframe, value) {filter(dataframe, interval == value) %>% select(Mean)}
df.clean <- df %>%
mutate( steps = ifelse( is.na(steps), get.mean.interval(df.mean.by.interval, interval), steps) )
View(df.mean.by.interval)
## Test
get.mean.interval <- function(dataframe, value) {
x <- filter(dataframe, interval == value) %>% select(Mean)
return(x)
}
df.clean <- df %>%
mutate( steps = ifelse( is.na(steps), get.mean.interval(df.mean.by.interval, interval), steps) )
## Test
get.mean.interval <- function(dataframe, value) {
x <- filter(dataframe, interval == value) %>% select(Mean)
return(x)
}
get.mean.interval(df.mean.by.interval, "0005")
## Test
get.mean.interval <- function(dataframe, value) {
x <- filter(dataframe, interval == value) %>% select(Mean)
return( as.double(x) )
}
get.mean.interval(df.mean.by.interval, "0005")
## Test
get.mean.interval <- function(dataframe, value) {
x <- filter(dataframe, interval == value) %>% select(Mean)
return( as.double(x) )
}
df.clean <- df %>%
mutate( steps = ifelse( is.na(steps), get.mean.interval(df.mean.by.interval, interval), steps) )
## Test
get.mean.interval <- function(dataframe, value) {
x <- filter(dataframe, interval == value) %>% select(Mean)
return( as.vector(x) )
}
df.clean <- df %>%
mutate( steps = ifelse( is.na(steps), get.mean.interval(df.mean.by.interval, interval), steps) )
get.mean.interval(df.mean.by.interval, "0005")
## Test
get.mean.interval <- function(dataframe, value) {
x <- filter(dataframe, interval == value) %>% select(Mean)
return( as.numeric(x) )
}
get.mean.interval(df.mean.by.interval, "0005")
df.clean <- df %>%
mutate( steps = ifelse( is.na(steps), get.mean.interval(df.mean.by.interval, interval), steps) )
df.clean <- df %>%
mutate( steps = ifelse( is.na(steps), get.mean.interval(df.mean.by.interval, "0005"), steps) )
unique(df.clean$steps)
df.clean
## Test
get.mean.interval <- function(dataframe, value) {
x <- filter(dataframe, interval == value) %>% select(Mean)
return( as.double(x) )
}
df.clean <- df %>%
mutate( steps = ifelse( is.na(steps), get.mean.interval(df.mean.by.interval, "0005"), steps) )
unique(df.clean$steps)
df.clean
unique(df.clean$steps)
df.clean <- df %>%
mutate( steps = ifelse( is.na(steps), get.mean.interval(df.mean.by.interval, select(interval)), steps) )
df
df.clean <- df %>%
mutate( steps = ifelse( is.na(steps), get.mean.interval(df.mean.by.interval, as.character(interval)), steps) )
df.clean <- df %>%
mutate( steps = ifelse( is.na(steps), 1, steps) )
unique(df.clean$steps)
df.clean
rm(list = ls())
library(dplyr)
library(lubridate)
library(stringr)
setwd("C:/coursera/RepData_PeerAssessment1")
## Loading and preprocessing the data
df <- tbl_df(read.table(unz("activity.zip", "activity.csv"), header = T, quote="\"", sep = ",", na.strings = "NA", colClasses = "character"))
df <- df %>%
mutate(steps = as.integer(steps)) %>%
mutate(date = ymd(date)) %>%
mutate(interval = str_pad(df$interval, 4, pad = "0"))
## Histogram of total number of steps taken each day
df.complete.cases <- df[complete.cases(df),]
df.total.steps <- aggregate(steps ~ date, data = df.complete.cases, FUN = sum)
hist(df.total.steps$steps)
## Mean and Median total number of steps per day
print(summarize(group_by(df.complete.cases, date), Mean = mean(steps), Median = median(steps) ), n=53)
## Plot average steps taken per day interval
df.mean.by.interval <- summarize( group_by(df.complete.cases, interval), Mean = mean(steps) )
plot(df.mean.by.interval$interval, df.mean.by.interval$Mean, type = "l", xlab = "Interval", main = "Daily Activity Pattern", ylab = "Average number of steps" )
## Max number of steps per day interval
max(df.mean.by.interval$Mean)
# Imputing missing values
## calculate and report the total number of missing values in the dataset
sum( complete.cases(df) == "FALSE" )
## Devise a strategy for filling missing values
df.mean.by.interval
df.clean <- df %>%
mutate( steps = ifelse( is.na(steps), 1, steps) )
df.clean <- df %>%
mutate( steps = ifelse( is.na(steps), get.mean.interval(df.mean.by.interval, as.character(interval)), steps) )
filter(df.mean.by.interval, interval == "0005") %>% select(Mean)
rm(list = ls())
library(dplyr)
library(lubridate)
library(stringr)
setwd("C:/coursera/RepData_PeerAssessment1")
## Loading and preprocessing the data
df <- tbl_df(read.table(unz("activity.zip", "activity.csv"), header = T, quote="\"", sep = ",", na.strings = "NA", colClasses = "character"))
df <- df %>%
mutate(steps = as.integer(steps)) %>%
mutate(date = ymd(date)) %>%
mutate(interval = str_pad(df$interval, 4, pad = "0"))
## Histogram of total number of steps taken each day
df.complete.cases <- df[complete.cases(df),]
df.total.steps <- aggregate(steps ~ date, data = df.complete.cases, FUN = sum)
hist(df.total.steps$steps)
## Mean and Median total number of steps per day
print(summarize(group_by(df.complete.cases, date), Mean = mean(steps), Median = median(steps) ), n=53)
## Plot average steps taken per day interval
df.mean.by.interval <- summarize( group_by(df.complete.cases, interval), Mean = mean(steps) )
plot(df.mean.by.interval$interval, df.mean.by.interval$Mean, type = "l", xlab = "Interval", main = "Daily Activity Pattern", ylab = "Average number of steps" )
## Max number of steps per day interval
max(df.mean.by.interval$Mean)
# Imputing missing values
## calculate and report the total number of missing values in the dataset
sum( complete.cases(df) == "FALSE" )
## Devise a strategy for filling missing values
df.mean.by.interval
df.clean <- df %>%
mutate( steps = ifelse( is.na(steps), 1, steps) )
df.clean
df.total.steps2 <- aggregate(steps ~ date, data = df.clean, FUN = sum)
hist(df.clean$steps)
unique(df.clean)
rm(list = ls())
library(dplyr)
library(lubridate)
library(stringr)
setwd("C:/coursera/RepData_PeerAssessment1")
## Loading and preprocessing the data
df <- tbl_df(read.table(unz("activity.zip", "activity.csv"), header = T, quote="\"", sep = ",", na.strings = "NA", colClasses = "character"))
df <- df %>%
mutate(steps = as.integer(steps)) %>%
mutate(date = ymd(date)) %>%
mutate(interval = str_pad(df$interval, 4, pad = "0"))
## Histogram of total number of steps taken each day
df.complete.cases <- df[complete.cases(df),]
df.total.steps <- aggregate(steps ~ date, data = df.complete.cases, FUN = sum)
hist(df.total.steps$steps)
## Mean and Median total number of steps per day
print(summarize(group_by(df.complete.cases, date), Mean = mean(steps), Median = median(steps) ), n=53)
## Plot average steps taken per day interval
df.mean.by.interval <- summarize( group_by(df.complete.cases, interval), Mean = mean(steps) )
plot(df.mean.by.interval$interval, df.mean.by.interval$Mean, type = "l", xlab = "Interval", main = "Daily Activity Pattern", ylab = "Average number of steps" )
## Max number of steps per day interval
max(df.mean.by.interval$Mean)
# Imputing missing values
## calculate and report the total number of missing values in the dataset
sum( complete.cases(df) == "FALSE" )
rm(list = ls())
library(dplyr)
library(lubridate)
library(stringr)
setwd("C:/coursera/RepData_PeerAssessment1")
## Loading and preprocessing the data
df <- tbl_df(read.table(unz("activity.zip", "activity.csv"), header = T, quote="\"", sep = ",", na.strings = "NA", colClasses = "character"))
df <- df %>%
mutate(steps = as.integer(steps)) %>%
mutate(date = ymd(date)) %>%
mutate(interval = str_pad(df$interval, 4, pad = "0"))
## Histogram of total number of steps taken each day
df.complete.cases <- df[complete.cases(df),]
df.total.steps <- aggregate(steps ~ date, data = df.complete.cases, FUN = sum)
hist(df.total.steps$steps)
rm(list = ls())
library(dplyr)
library(lubridate)
library(stringr)
setwd("C:/coursera/RepData_PeerAssessment1")
## Loading and preprocessing the data
df <- tbl_df(read.table(unz("activity.zip", "activity.csv"), header = T, quote="\"", sep = ",", na.strings = "NA", colClasses = "character"))
df <- df %>%
mutate(steps = as.integer(steps)) %>%
mutate(date = ymd(date)) %>%
mutate(interval = str_pad(df$interval, 4, pad = "0"))
## Histogram of total number of steps taken each day
df.complete.cases <- df[complete.cases(df),]
df.total.steps <- aggregate(steps ~ date, data = df.complete.cases, FUN = sum)
hist(df.total.steps$steps)
## Mean and Median total number of steps per day
print(summarize(group_by(df.complete.cases, date), Mean = mean(steps), Median = median(steps) ), n=53)
## Plot average steps taken per day interval
df.mean.by.interval <- summarize( group_by(df.complete.cases, interval), Mean = mean(steps) )
plot(df.mean.by.interval$interval, df.mean.by.interval$Mean, type = "l", xlab = "Interval", main = "Daily Activity Pattern", ylab = "Average number of steps" )
## Max number of steps per day interval
max(df.mean.by.interval$Mean)
# Imputing missing values
## calculate and report the total number of missing values in the dataset
sum( complete.cases(df) == "FALSE" )
## Devise a strategy for filling missing values
df.clean <- df %>%
mutate( steps = ifelse( is.na(steps), 1, steps) )
df.total.steps2 <- aggregate(steps ~ date, data = df.clean, FUN = sum, na.rm = FALSE)
hist(df.clean$steps)
rm(list = ls())
library(dplyr)
library(lubridate)
library(stringr)
setwd("C:/coursera/RepData_PeerAssessment1")
## Loading and preprocessing the data
df <- tbl_df(read.table(unz("activity.zip", "activity.csv"), header = T, quote="\"", sep = ",", na.strings = "NA", colClasses = "character"))
df <- df %>%
mutate(steps = as.integer(steps)) %>%
mutate(date = ymd(date)) %>%
mutate(interval = str_pad(df$interval, 4, pad = "0"))
## Histogram of total number of steps taken each day
df.complete.cases <- df[complete.cases(df),]
df.total.steps <- aggregate(steps ~ date, data = df.complete.cases, FUN = sum)
hist(df.total.steps$steps)
## Mean and Median total number of steps per day
print(summarize(group_by(df.complete.cases, date), Mean = mean(steps), Median = median(steps) ), n=53)
## Plot average steps taken per day interval
df.mean.by.interval <- summarize( group_by(df.complete.cases, interval), Mean = mean(steps) )
plot(df.mean.by.interval$interval, df.mean.by.interval$Mean, type = "l", xlab = "Interval", main = "Daily Activity Pattern", ylab = "Average number of steps" )
## Max number of steps per day interval
max(df.mean.by.interval$Mean)
# Imputing missing values
## calculate and report the total number of missing values in the dataset
sum( complete.cases(df) == "FALSE" )
## Devise a strategy for filling missing values
df.clean <- df %>%
mutate( steps = ifelse( is.na(steps), 1, steps) )
df.total.steps2 <- aggregate(steps ~ date, data = df.clean, FUN = sum, na.rm = FALSE)
hist(df.total.steps2$steps)
print(summarize(group_by(df.clean, date), Mean = mean(steps), Median = median(steps) ), n=53)
## Mean and Median total number of steps per day
print(summarize(group_by(df.clean, date), Mean = mean(steps), Median = median(steps) ), n=100)
##
df.clean$weekdays<-weekdays(df.clean$date)
df.clean$factor<- as.factor(c("weekend", "weekday"))
df.clean[df.clean$weekdays == "Sunday" | df.clean$weekdays == "Saturday" ,5]<- factor("weekend")
df.clean[!(df.clean$weekdays == "Sunday" | df.clean$weekdays == "Saturday"),5 ]<- factor("weekday")
##
df.clean.weekday <- subset(df.clean, factor == "weekday")
df.clean.weekend <- subset(df.clean, factor == "weekend")
steps.mean.weekday <- tapply(df.clean.weekday$steps, df.clean.weekday$interval, mean)
steps.mean.weekend <- tapply(df.clean.weekend$steps, df.clean.weekend$interval, mean)
par(mfrow=c(2,1), mar = c(5, 4, 1, 1))
plot(y = steps.mean.weekday, x = names(steps.mean.weekday), type = "l", xlab = "Interval", main = "Weekday Activity Pattern", ylab = "Average number of steps", ylim=c(0,220))
plot(y = steps.mean.weekend, x = names(steps.mean.weekend), type = "l", xlab = "Interval", main = "Weekend Activity Pattern", ylab = "Average number of steps", ylim = c(0,220))
